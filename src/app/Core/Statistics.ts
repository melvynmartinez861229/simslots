
/**
 *
 * El an치lisis de datos en estad칤stica descriptiva implica calcular medidas de tendencia central, como la media, mediana y moda, as칤 como medidas de dispersi칩n,
 * como la desviaci칩n est치ndar y el rango. Estas medidas ayudan a describir las caracter칤sticas centrales y la variabilidad de los datos.
 */
export class Statistics {
   /**
   *
   * @param data
   * @returns media aritmetica
   *
   * @description La media, tambi칠n conocida como promedio aritm칠tico, es una medida de tendencia central que se calcula sumando todos los valores de un conjunto de datos y dividiendo la suma por el n칰mero total de valores. En t칠rminos simples, la media representa el valor t칤pico o central de un conjunto de datos.
   *
   * 1 - Representaci칩n del conjunto de datos: La media proporciona un valor representativo del conjunto de datos, lo que facilita la comprensi칩n y la interpretaci칩n de la informaci칩n contenida en los datos.
   *
   * 2 - Comparaci칩n de conjuntos de datos: Permite comparar diferentes conjuntos de datos y evaluar c칩mo se distribuyen los valores en relaci칩n con el valor central.
   *
   * 3 - C치lculo de otras medidas estad칤sticas: La media es utilizada en el c치lculo de otras medidas estad칤sticas, como la varianza, la desviaci칩n est치ndar y el coeficiente de correlaci칩n.
   *
   * 4 - Facilita la toma de decisiones: Al proporcionar un valor central, la media puede ayudar en la toma de decisiones basadas en los datos y en la evaluaci칩n de resultados.
   */
   public static Mean(data: number[]): number {
    return parseFloat((data.reduce((sum, val) => sum + val, 0) / data.length).toFixed(4));
  }

  /**
   * Calcula la mediana de un conjunto de datos.
   * @param {*} data
   * @returns
   * La mediana es una medida de tendencia central que se utiliza para describir la distribuci칩n de un conjunto de datos. Es el valor que separa el 50% de los datos m치s peque침os del 50% restante. En otras palabras, la mediana es el valor que divide la distribuci칩n de los datos en dos partes iguales.
   *
   * 1 - Es resistente a valores at칤picos: La mediana es menos afectada por la presencia de valores at칤picos o outliers en la distribuci칩n de datos.
   *
   * 2 - Es una medida de tendencia central: La mediana es una medida de tendencia central que proporciona informaci칩n sobre el valor central de la distribuci칩n de datos.
   *
   * 3 - Es utilizada en an치lisis de datos: La mediana se utiliza com칰nmente en el an치lisis de datos para describir la distribuci칩n de los datos y para identificar tendencias y patrones.
   *
   * 4 - Es una medida de robustez: La mediana es una medida de robustez, ya que es menos afectada por la presencia de valores at칤picos o outliers en la distribuci칩n de datos.
   */
  public static Median(data: number[]) {
    const sorted = data.slice().sort((a, b) => a - b);
    const mid = Math.floor(sorted.length / 2);
    return sorted.length % 2 !== 0
      ? sorted[mid]
      : (sorted[mid - 1] + sorted[mid]) / 2;
  }

  /**
   * Calcula la moda de un conjunto de datos.
   * @param {*} data
   * @returns
   * La moda se calcula como el valor que se repite con mayor frecuencia en un conjunto de datos. Para calcular la moda, se sigue estos pasos:
   *
   * 1 - Ordenar los datos: Se ordenan los datos en orden ascendente o descendente.
   *
   * 2 - Contar la frecuencia: Se cuenta cu치ntas veces aparece cada n칰mero en el conjunto de datos.
   *
   * 3 - Identificar el valor m치s frecuente: El valor que se repite con mayor frecuencia es la moda.
   */
  public static Mode(data: number[]): number[] {
    const counts: { [key: number]: number } = {};
    data.forEach((val) => {
      counts[val] = (counts[val] || 0) + 1;
    });
    const maxCount = Math.max(...Object.values(counts));
    return Object.keys(counts)
      .filter((key) => counts[parseInt(key)] === maxCount)
      .map(Number);
  }

  // Calcula la varianza de un conjunto de datos.
  /**
   *
   * @param {*} data
   * @returns
   * La varianza se utiliza en diversas 치reas para evaluar la dispersi칩n de los datos en torno a la media. Algunos de los usos m치s comunes de la varianza incluyen:
   *
   * 1 - Evaluaci칩n de riesgos: En finanzas y ciencias actuales, la varianza se utiliza para evaluar el riesgo asociado con inversiones y pronosticar la volatilidad en los mercados.
   *
   * 2 - Control de calidad: En la producci칩n y manufactura, la varianza se utiliza para monitorear la consistencia y calidad de los productos. Una baja varianza indica una producci칩n m치s consistente.
   *
   * 3 - An치lisis de datos: La varianza es una medida fundamental en estad칤stica que nos proporciona informaci칩n crucial sobre la dispersi칩n de datos dentro de un conjunto. Comprender este concepto es esencial para cualquier an치lisis significativo.
   *
   * 4 - Interpretaci칩n de datos: La varianza ayuda a entender cu치nto se alejan los datos de su media. Una varianza baja indica que los datos est치n agrupados cerca de la media, mientras que una varianza alta sugiere una mayor dispersi칩n.
   *
   * 5 - C치lculo de la desviaci칩n est치ndar: La varianza se utiliza para calcular la desviaci칩n est치ndar, que es una medida de dispersi칩n que se utiliza para evaluar la variabilidad de los datos en la misma escala que los datos originales.
   *
   * 6 - An치lisis de teor칤as: La varianza se utiliza en el proceso de comprobaci칩n de teor칤as para anticiparse a los posibles resultados y analizar el comportamiento de los valores alrededor de su promedio.
   *
   * 7 - Evaluaci칩n de la consistencia: La varianza se utiliza para evaluar la consistencia de los datos y detectar valores at칤picos o outliers
   */
  public static Variance(data: number[]): number {
    const mean = this.Mean(data);
    return parseFloat((
      data.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) /
      (data.length - 1)
    ).toFixed(4));
  }

  // Calcula la desviaci칩n est치ndar de un conjunto de datos.
  /**
   *
   * @param {*} data
   * @returns
   * Donde:
   * 洧논洧녰 es cada valor del conjunto de datos.
   *
   * 洧논틜 es la media del conjunto de datos.
   *
   * 洧녵 es el n칰mero total de datos.
   */
  public static StandardDeviation(data: number[]): number {
    return parseFloat(Math.sqrt(this.Variance(data)).toFixed(4));
  }

  /**
   * Calcula el rango de un conjunto de datos.
   * @param {*} data
   * @returns
   * El rango de un conjunto de datos se calcula como la diferencia entre el valor m치ximo y el valor m칤nimo dentro del conjunto. La f칩rmula para calcular el rango es:
   *
   * R = M치x - M칤n
   *
   * Donde:
   *
   * R es el rango.
   *
   * M치x es el valor m치ximo del conjunto.
   *
   * M칤n es el valor m칤nimo del conjunto.
   */
  public static Range(data: number[]): number {
    return Math.max(...data) - Math.min(...data);
  }

  /**
   * Calcula los cuartiles de un conjunto de datos.
   * @param {*} data
   * @returns
   * Los cuartiles son una medida estad칤stica que se utiliza para dividir una distribuci칩n de datos en cuatro partes aproximadamente iguales,
   * cada una conteniendo el 25% de los datos. Los cuartiles se utilizan para:
   *
   * 1 - Dividir la distribuci칩n de datos: Los cuartiles permiten dividir una distribuci칩n de datos en cuatro partes, lo que facilita la visualizaci칩n y el an치lisis de la distribuci칩n de los datos.
   *
   * 2 - Identificar patrones y tendencias: Los cuartiles pueden ayudar a identificar patrones y tendencias en los datos, como la distribuci칩n de los valores, la presencia de valores at칤picos y la forma en que los datos se distribuyen.
   *
   * 3 - Interpretaci칩n de datos: Los cuartiles son una herramienta importante para la interpretaci칩n de datos, ya que permiten comprender mejor la distribuci칩n de los datos y tomar decisiones informadas.
   *
   * 4 - Visualizaci칩n de datos: Los cuartiles se utilizan com칰nmente en la visualizaci칩n de datos, ya sea mediante gr치ficos de cuartiles, diagramas de caja o gr치ficos de viol칤n, para proporcionar una visi칩n m치s completa de la distribuci칩n de los datos.
   *
   * 5 - An치lisis de datos: Los cuartiles se utilizan en el an치lisis de datos para identificar patrones y tendencias, y para comprender mejor la distribuci칩n de los datos
   */
  public static QUARTILES(data: number[]): number[] {
    const sorted = data.slice().sort((a, b) => a - b);
    const mid = Math.floor(sorted.length / 2);
    const q1 = this.Median(sorted.slice(0, mid));
    const q2 = this.Median(sorted);
    const q3 = this.Median(
      sorted.slice(mid + (sorted.length % 2))
    );
    return [q1, q2, q3];
  }

  /**
   * Calcula el rango intercuart칤lico de un conjunto de datos.
   * @param {*} data
   * @returns
   * El rango intercuart칤lico (IQR) es una medida estad칤stica que se calcula como la diferencia entre el tercer cuartil (Q3) y el primer cuartil (Q1) de una distribuci칩n de datos. El IQR se utiliza para medir la dispersi칩n interna de los datos, es decir, la dispersi칩n dentro de los datos mismos, en lugar de la dispersi칩n total que incluye la dispersi칩n externa (valores at칤picos o outliers).
   *
   * Identifica la dispersi칩n interna: El IQR muestra la dispersi칩n interna de los datos, es decir, la dispersi칩n dentro de los datos mismos, en lugar de la dispersi칩n total que incluye la dispersi칩n externa (valores at칤picos o outliers).
   *
   * 1 - Ayuda a identificar outliers: El IQR se utiliza com칰nmente para identificar valores at칤picos o outliers en una distribuci칩n de datos. Si un valor es m치s grande que Q3 + 1.5 * IQR o m치s peque침o que Q1 - 1.5 * IQR, se considera un outlier.
   *
   * 2 - Es una medida de robustez: El IQR es una medida de robustez, ya que es menos afectado por la presencia de valores at칤picos o outliers en la distribuci칩n de datos.
   */
  public static IQR(data: number[]): number {
    const [q1, q2, q3] = this.QUARTILES(data);
    return q3 - q1;
  }


  /**
   * Calcula la puntuaci칩n z de un valor en un conjunto de datos.
   * @param {*} data
   * @param {*} value
   * @returns
   * La puntuaci칩n z se utiliza para identificar valores at칤picos, evaluar la normalidad de una distribuci칩n y determinar la probabilidad de que un valor sea parte de una distribuci칩n normal. Los valores de puntuaci칩n z muy altos o muy bajos se encuentran en las colas de la distribuci칩n normal y se asocian con valores p muy peque침os, lo que indica que es poco probable que el valor sea parte de la distribuci칩n normal.
   *
   * 1 - Identificar valores at칤picos: Los valores con puntuaciones z muy altas o muy bajas se consideran at칤picos y pueden ser valores outliers.
   *
   * 2 - Evaluaci칩n de normalidad: La puntuaci칩n z se utiliza para evaluar si una distribuci칩n es normal. Si la mayor칤a de los valores tienen puntuaciones z dentro de un rango determinado, se puede considerar que la distribuci칩n es normal.
   *
   * 3 - Determinaci칩n de probabilidades: La puntuaci칩n z se utiliza para determinar la probabilidad de que un valor sea parte de una distribuci칩n normal. El valor p asociado con una puntuaci칩n z indica la probabilidad de que el valor sea parte de la distribuci칩n normal.
   */
   public static ZScore(data: number[], value: number): number {
    const mean = this.Mean(data);
    const std = this.StandardDeviation(data);
    return (value - mean) / std;
  }

   /**
   * Calcula el intervalo de confianza para un conjunto de datos.
   * @param {*} data
   * @param {*} confidence
   * @param {*} alternative
   * @returns
   *
   * El intervalo de confianza para un conjunto de datos se calcula para estimar, con un cierto nivel de confianza, el rango dentro del cual se espera que se encuentre un par치metro poblacional desconocido, como la media. Este c치lculo se basa en los datos de una muestra y proporciona un rango de valores dentro del cual es probable que se encuentre el verdadero valor del par치metro en la poblaci칩n.
   *
   * En t칠rminos simples, el intervalo de confianza es una medida de la precisi칩n de una estimaci칩n y proporciona informaci칩n sobre la variabilidad y la incertidumbre asociadas con la estimaci칩n de un par치metro poblacional a partir de una muestra. Un intervalo de confianza t칤pico se expresa como un rango de valores con un nivel de confianza asociado, como el 95% o el 90%.
   */
   public static ConfidenceInterval(
    data: number[],
  ): [number, number] {
    const mean = this.Mean(data);
    const std = this.StandardDeviation(data);
    const n = data.length;
    const tValue = 1.96;
    const margin = tValue * (std / Math.sqrt(n));
    return [mean - margin, mean + margin];
  }
}
